package com.example.lulu.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.platform.LocalContext
import com.example.lulu.components.DateRangeSelector
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.net.HttpURLConnection
import java.net.URL
import org.json.JSONObject
import java.io.File
import android.content.Intent
import androidx.core.content.FileProvider
import android.widget.Toast
import android.os.Environment
import android.content.ContentValues
import android.provider.MediaStore
import android.os.Build

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ReportsScreen() {
    var startDate by remember { mutableStateOf<LocalDate?>(null) }
    var endDate by remember { mutableStateOf<LocalDate?>(null) }
    var showDatePicker by remember { mutableStateOf(false) }
    val dateFormatter = DateTimeFormatter.ofPattern("MMM dd, yyyy")
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    var isLoading by remember { mutableStateOf(false) }
    var pdfGenerated by remember { mutableStateOf(false) }
    var generatedPdfFile by remember { mutableStateOf<File?>(null) }
    var errorMessage by remember { mutableStateOf<String?>(null) }
    val userId = 1
    val baseUrl = "http://10.0.2.2:8000"

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Generate Report",
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold
        )

        Card {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text(
                    text = "Select Date Range",
                    style = MaterialTheme.typography.titleMedium
                )

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    OutlinedButton(
                        onClick = { showDatePicker = true }
                    ) {
                        Text(
                            text = startDate?.format(dateFormatter) ?: "Start Date"
                        )
                    }
                    OutlinedButton(
                        onClick = { showDatePicker = true }
                    ) {
                        Text(
                            text = endDate?.format(dateFormatter) ?: "End Date"
                        )
                    }
                }

                Button(
                    onClick = {
                        scope.launch {
                            isLoading = true
                            pdfGenerated = false
                            errorMessage = null
                            generatedPdfFile = null
                            
                            try {
                                val pdfFile = generatePdfReport(
                                    baseUrl = baseUrl,
                                    userId = userId,
                                    startDate = startDate?.toString(),
                                    endDate = endDate?.toString(),
                                    context = context
                                )
                                
                                generatedPdfFile = pdfFile
                                pdfGenerated = true
                                Toast.makeText(context, "âœ… PDF Generated Successfully!", Toast.LENGTH_LONG).show()
                            } catch (e: Exception) {
                                errorMessage = "Generation Error: ${e.message}"
                                Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
                            } finally {
                                isLoading = false
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    enabled = startDate != null && endDate != null && !isLoading
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(20.dp),
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                    }
                    Text(if (isLoading) "Generating..." else "Generate PDF Report")
                }
                
                if (pdfGenerated && generatedPdfFile != null) {
                    Text(
                        text = "âœ… PDF generated successfully!",
                        color = MaterialTheme.colorScheme.primary,
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Button(
                        onClick = {
                            scope.launch {
                                try {
                                    val savedUri = savePdfToDownloads(
                                        context,
                                        generatedPdfFile!!,
                                        "patient_report_${startDate}_${endDate}.pdf"
                                    )
                                    
                                    if (savedUri != null) {
                                        val intent = Intent(Intent.ACTION_VIEW).apply {
                                            setDataAndType(savedUri, "application/pdf")
                                            flags = Intent.FLAG_GRANT_READ_URI_PERMISSION
                                        }
                                        context.startActivity(intent)
                                        Toast.makeText(context, "ðŸ“¥ PDF saved to Downloads!", Toast.LENGTH_SHORT).show()
                                    }
                                } catch (e: Exception) {
                                    Toast.makeText(context, "Download error: ${e.message}", Toast.LENGTH_LONG).show()
                                }
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        Text("ðŸ“¥ Download PDF")
                    }
                }
                
                if (errorMessage != null) {
                    Text(
                        text = errorMessage!!,
                        color = MaterialTheme.colorScheme.error,
                        style = MaterialTheme.typography.bodySmall
                    )
                }
            }
        }

        QuickSelectButtons(
            onPeriodSelected = { start, end ->
                startDate = start
                endDate = end
            }
        )
    }

    DateRangeSelector(
        showDialog = showDatePicker,
        startDate = startDate,
        endDate = endDate,
        onDateRangeSelected = { start, end ->
            startDate = start
            endDate = end
            showDatePicker = false
        },
        onDismiss = { showDatePicker = false }
    )
}

private fun savePdfToDownloads(context: android.content.Context, sourceFile: File, fileName: String): android.net.Uri? {
    return try {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            val contentValues = ContentValues().apply {
                put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)
                put(MediaStore.MediaColumns.MIME_TYPE, "application/pdf")
                put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)
            }
            val resolver = context.contentResolver
            val uri = resolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)
            uri?.let {
                resolver.openOutputStream(it)?.use { outputStream ->
                    sourceFile.inputStream().use { inputStream ->
                        inputStream.copyTo(outputStream)
                    }
                }
            }
            uri
        } else {
            val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
            val destFile = File(downloadsDir, fileName)
            sourceFile.copyTo(destFile, overwrite = true)
            android.net.Uri.fromFile(destFile)
        }
    } catch (e: Exception) {
        e.printStackTrace()
        null
    }
}

private suspend fun generatePdfReport(
    baseUrl: String,
    userId: Int,
    startDate: String?,
    endDate: String?,
    context: android.content.Context
): File = withContext(Dispatchers.IO) {
    val url = URL("$baseUrl/generate_report_pdf")
    val payload = JSONObject().apply {
        put("user_id", userId)
        if (startDate != null) put("start_date", startDate)
        if (endDate != null) put("end_date", endDate)
    }.toString()
    
    val conn = (url.openConnection() as HttpURLConnection).apply {
        doOutput = true
        requestMethod = "POST"
        setRequestProperty("Content-Type", "application/json")
        connectTimeout = 30000
        readTimeout = 30000
    }
    
    conn.outputStream.use { it.write(payload.toByteArray()) }
    
    if (conn.responseCode !in 200..299) {
        val error = conn.errorStream?.bufferedReader()?.readText() ?: "Unknown error"
        throw IllegalStateException("Failed to generate PDF: ${conn.responseCode} - $error")
    }
    
    val timestamp = System.currentTimeMillis()
    val pdfFile = File(context.cacheDir, "patient_report_$timestamp.pdf")
    
    conn.inputStream.use { input ->
        pdfFile.outputStream().use { output ->
            input.copyTo(output)
        }
    }
    
    return@withContext pdfFile
}

@Composable
private fun QuickSelectButtons(
    onPeriodSelected: (LocalDate, LocalDate) -> Unit
) {
    val today = LocalDate.now()

    Column(
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            FilterChip(
                selected = false,
                onClick = {
                    onPeriodSelected(
                        today.minusWeeks(1),
                        today
                    )
                },
                label = { Text("Last Week") }
            )
            FilterChip(
                selected = false,
                onClick = {
                    onPeriodSelected(
                        today.minusMonths(1),
                        today
                    )
                },
                label = { Text("Last Month") }
            )
        }
        
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            FilterChip(
                selected = false,
                onClick = {
                    onPeriodSelected(
                        today.minusMonths(3),
                        today
                    )
                },
                label = { Text("Last 3 Months") }
            )
            FilterChip(
                selected = false,
                onClick = {
                    onPeriodSelected(
                        today.minusMonths(3),
                        today
                    )
                },
                label = { Text("Current Session") }
            )
        }
    }
}